To create a countdown timer with React and Tailwind CSS, including the bonus feature of card flipping when the number changes, and allowing the user to change the countdown duration, you can follow these steps:

1. **Create a New React App:**
   Start by creating a new React app if you haven't already:

   ```bash
   npx create-react-app countdown-timer
   cd countdown-timer
   ```

2. **Install Tailwind CSS:**
   Install Tailwind CSS using npm:

   ```bash
   npm install tailwindcss
   ```

   Set up Tailwind CSS in your project by following the official Tailwind CSS documentation: https://tailwindcss.com/docs/installation

3. **Component Structure:**
   In your project, create the following components:

   - `Timer.js`: The main countdown timer component.
   - `App.js`: The main application component for rendering `Timer.js` and handling user input.

4. **Timer Component (`Timer.js`):**
   Here's a basic structure for the `Timer.js` component:

   ```jsx
   import React, { useState, useEffect } from 'react';

   function Timer() {
     const [countdown, setCountdown] = useState(14 * 24 * 60 * 60); // Initial countdown in seconds
     const [flip, setFlip] = useState(false);

     useEffect(() => {
       const timer = setInterval(() => {
         setCountdown((prevCountdown) => {
           if (prevCountdown === 1) {
             clearInterval(timer);
           }
           setFlip(!flip); // Trigger card flip animation
           return prevCountdown - 1;
         });
       }, 1000);

       return () => clearInterval(timer);
     }, [flip]);

     return (
       <div className="flex items-center justify-center h-screen">
         <div className="text-center">
           <div className="mb-4">
             <h1 className="text-4xl font-bold">Countdown Timer</h1>
           </div>
           <div className={`card ${flip ? 'flip' : ''}`}>
             <div className="card-inner">
               <span>{Math.floor(countdown / 86400)}</span>
               <span>{Math.floor((countdown % 86400) / 3600)}</span>
               <span>{Math.floor((countdown % 3600) / 60)}</span>
               <span>{countdown % 60}</span>
             </div>
           </div>
         </div>
       </div>
     );
   }

   export default Timer;
   ```

   In this component:
   - `countdown` state stores the remaining time in seconds.
   - `flip` state is used to trigger card flipping animation.
   - `useEffect` is used to update the countdown and trigger card flips every second.
   - The countdown is displayed in days, hours, minutes, and seconds.

5. **CSS for Card Flipping:**
   Add CSS for card flipping animations. You can create a CSS file (e.g., `Timer.css`) and import it into `Timer.js`:

   ```css
   .card {
     position: relative;
     perspective: 1000px;
   }

   .card-inner {
     width: 100%;
     height: 100%;
     transform-style: preserve-3d;
     transition: transform 0.5s;
   }

   .card.flip .card-inner {
     transform: rotateY(180deg);
   }
   ```

6. **App Component (`App.js`):**
   In the `App.js` component, you can provide an input field for the user to change the countdown duration:

   ```jsx
   import React, { useState } from 'react';
   import Timer from './Timer';

   function App() {
     const [customDuration, setCustomDuration] = useState('');

     const handleInputChange = (e) => {
       setCustomDuration(e.target.value);
     };

     const handleStartCountdown = () => {
       // Convert user input to seconds and set it as the new countdown
       setCustomDuration('');
     };

     return (
       <div className="App">
         <Timer />
         <div className="mt-4">
           <input
             type="text"
             placeholder="Enter custom duration (in seconds)"
             value={customDuration}
             onChange={handleInputChange}
             className="px-2 py-1 border border-gray-400 rounded"
           />
           <button onClick={handleStartCountdown} className="ml-2 px-3 py-1 bg-blue-500 text-white rounded">
             Start Countdown
           </button>
         </div>
       </div>
     );
   }

   export default App;
   ```

   In this component, the user can enter a custom duration in seconds, and clicking "Start Countdown" will update the countdown timer.

7. **Styling:**
   You can further style your components using Tailwind CSS classes to match your design.

8. **Running the App:**
   Start your React development server:

   ```bash
   npm start
   ```

   Your countdown timer app, with the ability to change the countdown duration and card flipping animation, will now be available in your browser.

Remember to adjust the CSS and styling to match your specific design.
Additionally, you can add more features and customization as needed.